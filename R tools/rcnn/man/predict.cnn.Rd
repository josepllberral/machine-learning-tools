% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrapper.R
\name{predict.cnn}
\alias{predict.cnn}
\title{Predicting using a Convolutional Network or MultiLayer Perceptron Function}
\usage{
\method{predict}{cnn}(cnn, newdata, rand_seed = as.integer(floor(runif(1) *
  1000)))
}
\arguments{
\item{cnn}{A trained CNN or MLP.}

\item{newdata}{A matrix with data, one example per row.}
}
\description{
This function predicts a dataset using a trained CNN (or MLP). Admits as
parameters the testing dataset, and a trained CNN. Returns a matrix of
predicted outputs.
}
\examples{
## Simple example with CNNs
test_X <- array(c(1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,
                  0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0),
                  c(6, 1, 2, 3));
results <- predict(cnn1, test_X);

## The MNIST example with CNNs
data(mnist)

img_size <- c(28,28);

train <- mnist$train;
training_x <- array(train$x, c(nrow(train$x), 1, img_size)) / 255;
training_y <- binarization(train$y);

test <- mnist$test;
testing_x <- array(test$x, c(nrow(test$x), 1, img_size)) / 255;
testing_y <- binarization(test$y);

dataset <- training_x[1:1000,,,, drop=FALSE];
targets <- training_y[1:1000,, drop=FALSE];

newdata <- testing_x[1:1000,,,, drop=FALSE];

prediction <- predict(mnist_cnn, newdata);

## Simple example with MLPs
test_X <- array(c(1, 1, 1, 0, 0, 0,
                  1, 0, 1, 0, 0, 0,
                  1, 1, 1, 0, 0, 0,
                  0, 0, 1, 1, 1, 0,
                  0, 0, 1, 0, 1, 0,
                  0, 0, 1, 1, 1, 0),
                  c(6, 6));

results <- predict(mlp1, test_X);

## The MNIST example with MLPs
data(mnist)

test <- mnist$test;
testing_x <- test$x / 255;
testing_y <- binarization(test$y);

newdata <- testing_x[1:1000,, drop=FALSE];

prediction <- predict(mnist_mlp, newdata);
}
\keyword{CNN}
\keyword{MLP}

